import React, { useState } from "react";
import {
  Table,
  Button,
  Tag,
  Input,
  Select,
  Space,
  Pagination,
  Drawer,
  Switch,
  Divider,
  Radio,
  Typography,
} from "antd";
import {
  SearchOutlined,
  EyeOutlined,
  PlusOutlined,
  PrinterOutlined,
} from "@ant-design/icons";

const { Option } = Select;
const { Title, Text } = Typography;

const Home = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [openDrawer, setOpenDrawer] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);

  const data = [
    {
      key: "1",
      code: "#PN0015",
      table: "B√†n 02",
      phone: "09xx xxx 123",
      point: "120 ƒëi·ªÉm",
      total: "275,000ƒë",
      status: "Ch·ªù x√°c nh·∫≠n",
    },
    {
      key: "2",
      code: "#PN0014",
      table: "B√†n 03",
      phone: "-",
      point: "-",
      total: "180,000ƒë",
      status: "ƒêang ph·ª•c v·ª•",
    },
    {
      key: "3",
      code: "#PN0013",
      table: "B√†n 07",
      phone: "08xx xxx 456",
      point: "85 ƒëi·ªÉm",
      total: "320,000ƒë",
      status: "ƒêang ph·ª•c v·ª•",
    },
    {
      key: "4",
      code: "#PN0012",
      table: "B√†n 05",
      phone: "09xx xxx 123",
      point: "120 ƒëi·ªÉm",
      total: "275,000ƒë",
      status: "M√≥n m·ªõi",
    },
    {
      key: "5",
      code: "#PN0011",
      table: "B√†n 03",
      phone: "-",
      point: "-",
      total: "180,000ƒë",
      status: "ƒêang ph·ª•c v·ª•",
    },
    {
      key: "6",
      code: "#PN0010",
      table: "B√†n 07",
      phone: "08xx xxx 456",
      point: "85 ƒëi·ªÉm",
      total: "320,000ƒë",
      status: "Ho√†n t·∫•t",
    },
  ];

  const columns = [
    {
      title: "M√£ ƒë∆°n",
      dataIndex: "code",
      key: "code",
    },
    {
      title: "B√†n",
      dataIndex: "table",
      key: "table",
    },
    {
      title: "S·ªë ƒëi·ªán tho·∫°i",
      dataIndex: "phone",
      key: "phone",
      render: (text) => (
        <>
          {text}
          {text !== "-" && (
            <EyeOutlined style={{ marginLeft: 8, color: "#1890ff" }} />
          )}
        </>
      ),
    },
    {
      title: "ƒêi·ªÉm t√≠ch l≈©y",
      dataIndex: "point",
      key: "point",
    },
    {
      title: "T·ªïng ti·ªÅn",
      dataIndex: "total",
      key: "total",
      render: (text) => (
        <span style={{ fontWeight: 600, color: "#d46b08" }}>{text}</span>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => {
        let color = "blue";
        if (status === "Ch·ªù x√°c nh·∫≠n") color = "orange";
        if (status === "M√≥n m·ªõi") color = "volcano";
        if (status === "Ho√†n t·∫•t") color = "green";
        return <Tag color={color}>{status}</Tag>;
      },
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button size="small">Chi ti·∫øt</Button>
          {record.status === "Ho√†n t·∫•t" ? (
            <Button size="small" disabled>
              ƒê√£ thanh to√°n
            </Button>
          ) : (
            <Button
              type="primary"
              size="small"
              onClick={() => {
                setSelectedOrder(record);
                setOpenDrawer(true);
              }}
            >
              Thanh to√°n
            </Button>
          )}
        </Space>
      ),
    },
  ];

  return (
    <div style={{ padding: 16 }}>
      {/* Header actions */}
      <div
        style={{
          marginBottom: 16,
          display: "flex",
          flexWrap: "wrap",
          gap: 8,
          justifyContent: "space-between",
        }}
      >
        <Input
          placeholder="Nh·∫≠p m√£ ƒë∆°n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i..."
          prefix={<SearchOutlined />}
          style={{ maxWidth: 250 }}
        />
        <Space wrap>
          <Select defaultValue="all" style={{ minWidth: 140 }}>
            <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
            <Option value="waiting">Ch·ªù x√°c nh·∫≠n</Option>
            <Option value="serving">ƒêang ph·ª•c v·ª•</Option>
            <Option value="done">Ho√†n t·∫•t</Option>
          </Select>
          <Select defaultValue="today" style={{ minWidth: 120 }}>
            <Option value="today">H√¥m nay</Option>
            <Option value="yesterday">H√¥m qua</Option>
            <Option value="week">Tu·∫ßn n√†y</Option>
          </Select>
          <Select defaultValue="new" style={{ minWidth: 150 }}>
            <Option value="new">M·ªõi nh·∫•t ‚Üí C≈© nh·∫•t</Option>
            <Option value="old">C≈© nh·∫•t ‚Üí M·ªõi nh·∫•t</Option>
          </Select>
          <Button type="primary" icon={<PlusOutlined />}>
            T·∫°o ƒë∆°n m·ªõi
          </Button>
          <Button icon={<PrinterOutlined />}>In h√≥a ƒë∆°n</Button>
        </Space>
      </div>

      {/* Table */}
      <Table
        columns={columns}
        dataSource={data}
        pagination={false}
        bordered
        size="middle"
        scroll={{ x: "max-content" }}
      />

      {/* Pagination */}
      <div style={{ textAlign: "right", marginTop: 16 }}>
        <Pagination
          current={currentPage}
          total={127}
          pageSize={5}
          onChange={(page) => setCurrentPage(page)}
          showSizeChanger={false}
        />
      </div>

      {/* Drawer */}
      <Drawer
        title={`Thanh to√°n ƒë∆°n ${selectedOrder?.code}`}
        placement="right"
        width={480}
        onClose={() => setOpenDrawer(false)}
        open={openDrawer}
      >
        {selectedOrder && (
          <>
            {/* Th√¥ng tin kh√°ch h√†ng */}
            <div
              style={{
                background: "#f5f5f5",
                padding: 12,
                borderRadius: 8,
                marginBottom: 16,
              }}
            >
              <Text strong>B√†n:</Text> {selectedOrder.table} <br />
              <Text strong>S·ªë ƒëi·ªán tho·∫°i:</Text> {selectedOrder.phone} <br />
              <Text strong>ƒêi·ªÉm t√≠ch l≈©y:</Text> {selectedOrder.point}
            </div>

            {/* Chi ti·∫øt h√≥a ƒë∆°n (mock) */}
            <div style={{ marginBottom: 16 }}>
              <Title level={5}>Chi ti·∫øt h√≥a ƒë∆°n</Title>
              <Text>G√† kho x·∫£ ·ªõt √ó1 - 120,000ƒë</Text> <br />
              <Text>Canh chua c√° l√≥c √ó1 - 95,000ƒë</Text> <br />
              <Divider />
              <Text>C∆°m tr·∫Øng √ó2 - 40,000ƒë</Text> <br />
              <Text>Tr√† ƒë√° √ó2 - 20,000ƒë</Text>
            </div>

            {/* S·ª≠ d·ª•ng ƒëi·ªÉm */}
            <div
              style={{
                background: "#f5f5f5",
                padding: 12,
                borderRadius: 8,
                marginBottom: 16,
              }}
            >
              <Text>S·ª≠ d·ª•ng ƒëi·ªÉm t√≠ch l≈©y (85 ƒëi·ªÉm = 85,000ƒë)</Text>
              <Switch style={{ marginLeft: 8 }} />
            </div>

            {/* T·ªïng c·ªông */}
            <div
              style={{
                background: "#fff7e6",
                padding: 12,
                borderRadius: 8,
                marginBottom: 16,
              }}
            >
              <Text strong>T·ªïng c·ªông:</Text>{" "}
              <span style={{ fontSize: 18, fontWeight: "bold", color: "#d46b08" }}>
                {selectedOrder.total}
              </span>
            </div>

            {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
            <Title level={5}>Ph∆∞∆°ng th·ª©c thanh to√°n</Title>
            <Radio.Group style={{ display: "flex", flexDirection: "column", gap: 8 }}>
              <Radio value="cash">üíµ Ti·ªÅn m·∫∑t</Radio>
              <Radio value="bank">üè¶ Chuy·ªÉn kho·∫£n</Radio>
              <Radio value="momo">üì± MoMo</Radio>
              <Radio value="vnpay">üí≥ VNPay</Radio>
            </Radio.Group>

            {/* N√∫t h√†nh ƒë·ªông */}
            <div style={{ marginTop: 24 }}>
              <Button type="primary" block size="large" style={{ marginBottom: 8 }}>
                ‚úî X√°c nh·∫≠n thanh to√°n
              </Button>
              <Button block>üñ® In h√≥a ƒë∆°n</Button>
            </div>
          </>
        )}
      </Drawer>
    </div>
  );
};

export default Home;
